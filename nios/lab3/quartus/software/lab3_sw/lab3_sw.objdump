
lab3_sw.elf:     file format elf32-littlenios2
lab3_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x000009cc memsz 0x000009cc flags r-x
    LOAD off    0x000019ec vaddr 0x000029ec paddr 0x000029f0 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000019f4 vaddr 0x000029f4 paddr 0x000029f4 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00002020  00002020  000019f0  2**0
                  CONTENTS
  2 .text         00000958  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000074  00002978  00002978  00001978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000029ec  000029f0  000019ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000029f4  000029f4  000019f4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00002a00  00002a00  000019f0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001e8  00000000  00000000  00001a18  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000fe7  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000083e  00000000  00000000  00002be7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000967  00000000  00000000  00003425  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000344  00000000  00000000  00003d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000730  00000000  00000000  000040d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000005a9  00000000  00000000  00004800  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00004dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00004df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005d3e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00005d41  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005d4b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00005d4c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00005d4d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00005d56  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00005d5f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00005d68  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001c  00000000  00000000  00005d71  2**0
                  CONTENTS, READONLY
 26 .jdi          00003f5f  00000000  00000000  00005d8d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00038980  00000000  00000000  00009cec  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002020 l    d  .text	00000000 .text
00002978 l    d  .rodata	00000000 .rodata
000029ec l    d  .rwdata	00000000 .rwdata
000029f4 l    d  .bss	00000000 .bss
00002a00 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab3_sw_bsp//obj/HAL/src/crt0.o
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 lab3_source_alt.c
00000000 l    df *ABS*	00000000 alt_load.c
000020fc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
000021e8 g     F .text	00000054 alt_main
000029f0 g       *ABS*	00000000 __flash_rwdata_start
000029ec g     O .rwdata	00000004 jtag_uart
00002778 g     F .text	00000024 altera_nios2_gen2_irq_init
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
000029f8 g     O .bss	00000004 alt_argv
0000a9ec g       *ABS*	00000000 _gp
000024c4 g     F .text	00000030 usleep
00002894 g     F .text	00000064 .hidden __udivsi3
00002a00 g       *ABS*	00000000 __bss_end
00002000 g       *ABS*	00000000 __alt_mem_onchip_mem
00002738 g     F .text	00000020 alt_dcache_flush_all
000029f0 g       *ABS*	00000000 __ram_rwdata_end
000029ec g       *ABS*	00000000 __ram_rodata_end
000028f8 g     F .text	00000058 .hidden __umodsi3
00002a00 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
0000254c g     F .text	00000094 altera_avalon_jtag_uart_write
0000223c g     F .text	0000022c alt_printf
00002020 g     F .text	0000003c _start
0000252c g     F .text	00000020 alt_sys_init
00002950 g     F .text	00000028 .hidden __mulsi3
000029ec g       *ABS*	00000000 __ram_rwdata_start
00002978 g       *ABS*	00000000 __ram_rodata_start
000025e0 g     F .text	00000158 alt_busy_sleep
00002a00 g       *ABS*	00000000 __alt_stack_base
000029f4 g       *ABS*	00000000 __bss_start
0000205c g     F .text	000000a0 main
000029fc g     O .bss	00000004 alt_envp
0000279c g     F .text	00000084 .hidden __divsi3
00002978 g       *ABS*	00000000 __flash_rodata_start
000024f4 g     F .text	00000038 alt_irq_init
000029f4 g     O .bss	00000004 alt_argc
00002020 g       *ABS*	00000000 __ram_exceptions_start
000029f0 g       *ABS*	00000000 _edata
00002a00 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
00002820 g     F .text	00000074 .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit
00002468 g     F .text	0000005c alt_putchar
00002758 g     F .text	00000020 alt_icache_flush_all
00002164 g     F .text	00000084 alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6aa7b14 	ori	gp,gp,43500
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	108a7d14 	ori	r2,r2,10740

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18ca8014 	ori	r3,r3,10752

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_gp+0xffff7658>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	00021640 	call	2164 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	00021e80 	call	21e8 <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <_gp+0xffff766c>

0000205c <main>:

int main(void)
{
	int buttons; // Use to hold button value
	int led = 0x00; // Use to write to led
	alt_printf("Hello XXXXXXX !\n Processor NiosII is launched!\n ");
    205c:	01000034 	movhi	r4,0

#define NONE_PRESSED 0x1 // Value read from button PIO when no buttons pressed
#define DEBOUNCE 30000 // Time in microseconds to wait for switch debounce

int main(void)
{
    2060:	defff904 	addi	sp,sp,-28
	int buttons; // Use to hold button value
	int led = 0x00; // Use to write to led
	alt_printf("Hello XXXXXXX !\n Processor NiosII is launched!\n ");
    2064:	210a5e04 	addi	r4,r4,10616

#define NONE_PRESSED 0x1 // Value read from button PIO when no buttons pressed
#define DEBOUNCE 30000 // Time in microseconds to wait for switch debounce

int main(void)
{
    2068:	dfc00615 	stw	ra,24(sp)
    206c:	dd000415 	stw	r20,16(sp)
    2070:	dd400515 	stw	r21,20(sp)
    2074:	dcc00315 	stw	r19,12(sp)
    2078:	dc800215 	stw	r18,8(sp)
    207c:	dc400115 	stw	r17,4(sp)
    2080:	dc000015 	stw	r16,0(sp)
	int buttons; // Use to hold button value
	int led = 0x00; // Use to write to led
	alt_printf("Hello XXXXXXX !\n Processor NiosII is launched!\n ");
    2084:	000223c0 	call	223c <alt_printf>
	alt_printf("Push any button on miniDiLaB-CIV\n \n ");
    2088:	01000034 	movhi	r4,0
    208c:	210a6b04 	addi	r4,r4,10668
    2090:	000223c0 	call	223c <alt_printf>
	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,led); // Write new value to pio
    2094:	05140c04 	movi	r20,20528
    2098:	a0000035 	stwio	zero,0(r20)
#define DEBOUNCE 30000 // Time in microseconds to wait for switch debounce

int main(void)
{
	int buttons; // Use to hold button value
	int led = 0x00; // Use to write to led
    209c:	0025883a 	mov	r18,zero
	alt_printf("Hello XXXXXXX !\n Processor NiosII is launched!\n ");
	alt_printf("Push any button on miniDiLaB-CIV\n \n ");
	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,led); // Write new value to pio
	while (1) { // Read buttons via pio
		buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
    20a0:	04540804 	movi	r17,20512
		if (buttons != NONE_PRESSED) { // if button pressed
    20a4:	04000044 	movi	r16,1
			if (led >= 0x80 || led==0x00)
    20a8:	05401fc4 	movi	r21,127
	int led = 0x00; // Use to write to led
	alt_printf("Hello XXXXXXX !\n Processor NiosII is launched!\n ");
	alt_printf("Push any button on miniDiLaB-CIV\n \n ");
	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,led); // Write new value to pio
	while (1) { // Read buttons via pio
		buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
    20ac:	88800037 	ldwio	r2,0(r17)
		if (buttons != NONE_PRESSED) { // if button pressed
    20b0:	143ffe26 	beq	r2,r16,20ac <_gp+0xffff76c0>
			if (led >= 0x80 || led==0x00)
    20b4:	ac800e16 	blt	r21,r18,20f0 <main+0x94>
    20b8:	90000d26 	beq	r18,zero,20f0 <main+0x94>
				led = 0x01; // reset pattern
			else
				led = led << 1;
    20bc:	94a5883a 	add	r18,r18,r18
    20c0:	04a6303a 	nor	r19,zero,r18
			alt_printf("pbb button is pushed\n ");
    20c4:	01000034 	movhi	r4,0
    20c8:	210a7504 	addi	r4,r4,10708
    20cc:	000223c0 	call	223c <alt_printf>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,~led); // Write new value to pio
    20d0:	a4c00035 	stwio	r19,0(r20)
			// Switch debounce routine
			usleep (DEBOUNCE);
    20d4:	011d4c04 	movi	r4,30000
    20d8:	00024c40 	call	24c4 <usleep>
			while (buttons != NONE_PRESSED) // wait for button release
				buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
    20dc:	88800037 	ldwio	r2,0(r17)
				led = led << 1;
			alt_printf("pbb button is pushed\n ");
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,~led); // Write new value to pio
			// Switch debounce routine
			usleep (DEBOUNCE);
			while (buttons != NONE_PRESSED) // wait for button release
    20e0:	143ffe1e 	bne	r2,r16,20dc <_gp+0xffff76f0>
				buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
			usleep (DEBOUNCE);
    20e4:	011d4c04 	movi	r4,30000
    20e8:	00024c40 	call	24c4 <usleep>
    20ec:	003fef06 	br	20ac <_gp+0xffff76c0>
    20f0:	04ffff84 	movi	r19,-2
	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,led); // Write new value to pio
	while (1) { // Read buttons via pio
		buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
		if (buttons != NONE_PRESSED) { // if button pressed
			if (led >= 0x80 || led==0x00)
				led = 0x01; // reset pattern
    20f4:	04800044 	movi	r18,1
    20f8:	003ff206 	br	20c4 <_gp+0xffff76d8>

000020fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    20fc:	defffc04 	addi	sp,sp,-16
    2100:	df000315 	stw	fp,12(sp)
    2104:	df000304 	addi	fp,sp,12
    2108:	e13ffd15 	stw	r4,-12(fp)
    210c:	e17ffe15 	stw	r5,-8(fp)
    2110:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    2114:	e0fffe17 	ldw	r3,-8(fp)
    2118:	e0bffd17 	ldw	r2,-12(fp)
    211c:	18800c26 	beq	r3,r2,2150 <alt_load_section+0x54>
  {
    while( to != end )
    2120:	00000806 	br	2144 <alt_load_section+0x48>
    {
      *to++ = *from++;
    2124:	e0bffe17 	ldw	r2,-8(fp)
    2128:	10c00104 	addi	r3,r2,4
    212c:	e0fffe15 	stw	r3,-8(fp)
    2130:	e0fffd17 	ldw	r3,-12(fp)
    2134:	19000104 	addi	r4,r3,4
    2138:	e13ffd15 	stw	r4,-12(fp)
    213c:	18c00017 	ldw	r3,0(r3)
    2140:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    2144:	e0fffe17 	ldw	r3,-8(fp)
    2148:	e0bfff17 	ldw	r2,-4(fp)
    214c:	18bff51e 	bne	r3,r2,2124 <_gp+0xffff7738>
    {
      *to++ = *from++;
    }
  }
}
    2150:	0001883a 	nop
    2154:	e037883a 	mov	sp,fp
    2158:	df000017 	ldw	fp,0(sp)
    215c:	dec00104 	addi	sp,sp,4
    2160:	f800283a 	ret

00002164 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2164:	defffe04 	addi	sp,sp,-8
    2168:	dfc00115 	stw	ra,4(sp)
    216c:	df000015 	stw	fp,0(sp)
    2170:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    2174:	01800034 	movhi	r6,0
    2178:	318a7c04 	addi	r6,r6,10736
    217c:	01400034 	movhi	r5,0
    2180:	294a7b04 	addi	r5,r5,10732
    2184:	01000034 	movhi	r4,0
    2188:	210a7c04 	addi	r4,r4,10736
    218c:	00020fc0 	call	20fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    2190:	01800034 	movhi	r6,0
    2194:	31880804 	addi	r6,r6,8224
    2198:	01400034 	movhi	r5,0
    219c:	29480804 	addi	r5,r5,8224
    21a0:	01000034 	movhi	r4,0
    21a4:	21080804 	addi	r4,r4,8224
    21a8:	00020fc0 	call	20fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    21ac:	01800034 	movhi	r6,0
    21b0:	318a7b04 	addi	r6,r6,10732
    21b4:	01400034 	movhi	r5,0
    21b8:	294a5e04 	addi	r5,r5,10616
    21bc:	01000034 	movhi	r4,0
    21c0:	210a5e04 	addi	r4,r4,10616
    21c4:	00020fc0 	call	20fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    21c8:	00027380 	call	2738 <alt_dcache_flush_all>
  alt_icache_flush_all();
    21cc:	00027580 	call	2758 <alt_icache_flush_all>
}
    21d0:	0001883a 	nop
    21d4:	e037883a 	mov	sp,fp
    21d8:	dfc00117 	ldw	ra,4(sp)
    21dc:	df000017 	ldw	fp,0(sp)
    21e0:	dec00204 	addi	sp,sp,8
    21e4:	f800283a 	ret

000021e8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    21e8:	defffe04 	addi	sp,sp,-8
    21ec:	dfc00115 	stw	ra,4(sp)
    21f0:	df000015 	stw	fp,0(sp)
    21f4:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    21f8:	0009883a 	mov	r4,zero
    21fc:	00024f40 	call	24f4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    2200:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2204:	000252c0 	call	252c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2208:	d0a00217 	ldw	r2,-32760(gp)
    220c:	d0e00317 	ldw	r3,-32756(gp)
    2210:	d1200417 	ldw	r4,-32752(gp)
    2214:	200d883a 	mov	r6,r4
    2218:	180b883a 	mov	r5,r3
    221c:	1009883a 	mov	r4,r2
    2220:	000205c0 	call	205c <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2224:	0001883a 	nop
    2228:	e037883a 	mov	sp,fp
    222c:	dfc00117 	ldw	ra,4(sp)
    2230:	df000017 	ldw	fp,0(sp)
    2234:	dec00204 	addi	sp,sp,8
    2238:	f800283a 	ret

0000223c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    223c:	defff204 	addi	sp,sp,-56
    2240:	dfc00a15 	stw	ra,40(sp)
    2244:	df000915 	stw	fp,36(sp)
    2248:	df000904 	addi	fp,sp,36
    224c:	e13fff15 	stw	r4,-4(fp)
    2250:	e1400215 	stw	r5,8(fp)
    2254:	e1800315 	stw	r6,12(fp)
    2258:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
    225c:	e0800204 	addi	r2,fp,8
    2260:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    2264:	e0bfff17 	ldw	r2,-4(fp)
    2268:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
    226c:	00006f06 	br	242c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2270:	e0bff807 	ldb	r2,-32(fp)
    2274:	10800960 	cmpeqi	r2,r2,37
    2278:	1000041e 	bne	r2,zero,228c <alt_printf+0x50>
        {
            alt_putchar(c);
    227c:	e0bff807 	ldb	r2,-32(fp)
    2280:	1009883a 	mov	r4,r2
    2284:	00024680 	call	2468 <alt_putchar>
    2288:	00006806 	br	242c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    228c:	e0bff717 	ldw	r2,-36(fp)
    2290:	10c00044 	addi	r3,r2,1
    2294:	e0fff715 	stw	r3,-36(fp)
    2298:	10800003 	ldbu	r2,0(r2)
    229c:	e0bff805 	stb	r2,-32(fp)
    22a0:	e0bff807 	ldb	r2,-32(fp)
    22a4:	10006926 	beq	r2,zero,244c <alt_printf+0x210>
            {
                if (c == '%')
    22a8:	e0bff807 	ldb	r2,-32(fp)
    22ac:	10800958 	cmpnei	r2,r2,37
    22b0:	1000041e 	bne	r2,zero,22c4 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    22b4:	e0bff807 	ldb	r2,-32(fp)
    22b8:	1009883a 	mov	r4,r2
    22bc:	00024680 	call	2468 <alt_putchar>
    22c0:	00005a06 	br	242c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
    22c4:	e0bff807 	ldb	r2,-32(fp)
    22c8:	108018d8 	cmpnei	r2,r2,99
    22cc:	1000081e 	bne	r2,zero,22f0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
    22d0:	e0bffe17 	ldw	r2,-8(fp)
    22d4:	10c00104 	addi	r3,r2,4
    22d8:	e0fffe15 	stw	r3,-8(fp)
    22dc:	10800017 	ldw	r2,0(r2)
    22e0:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
    22e4:	e13ffd17 	ldw	r4,-12(fp)
    22e8:	00024680 	call	2468 <alt_putchar>
    22ec:	00004f06 	br	242c <alt_printf+0x1f0>
                }
                else if (c == 'x')
    22f0:	e0bff807 	ldb	r2,-32(fp)
    22f4:	10801e18 	cmpnei	r2,r2,120
    22f8:	1000341e 	bne	r2,zero,23cc <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    22fc:	e0bffe17 	ldw	r2,-8(fp)
    2300:	10c00104 	addi	r3,r2,4
    2304:	e0fffe15 	stw	r3,-8(fp)
    2308:	10800017 	ldw	r2,0(r2)
    230c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    2310:	e0bffb17 	ldw	r2,-20(fp)
    2314:	1000031e 	bne	r2,zero,2324 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
    2318:	01000c04 	movi	r4,48
    231c:	00024680 	call	2468 <alt_putchar>
                        continue;
    2320:	00004206 	br	242c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    2324:	00800704 	movi	r2,28
    2328:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
    232c:	00000306 	br	233c <alt_printf+0x100>
                        digit_shift -= 4;
    2330:	e0bff917 	ldw	r2,-28(fp)
    2334:	10bfff04 	addi	r2,r2,-4
    2338:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    233c:	00c003c4 	movi	r3,15
    2340:	e0bff917 	ldw	r2,-28(fp)
    2344:	1884983a 	sll	r2,r3,r2
    2348:	1007883a 	mov	r3,r2
    234c:	e0bffb17 	ldw	r2,-20(fp)
    2350:	1884703a 	and	r2,r3,r2
    2354:	103ff626 	beq	r2,zero,2330 <_gp+0xffff7944>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    2358:	00001906 	br	23c0 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    235c:	00c003c4 	movi	r3,15
    2360:	e0bff917 	ldw	r2,-28(fp)
    2364:	1884983a 	sll	r2,r3,r2
    2368:	1007883a 	mov	r3,r2
    236c:	e0bffb17 	ldw	r2,-20(fp)
    2370:	1886703a 	and	r3,r3,r2
    2374:	e0bff917 	ldw	r2,-28(fp)
    2378:	1884d83a 	srl	r2,r3,r2
    237c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
    2380:	e0bffc17 	ldw	r2,-16(fp)
    2384:	108002a8 	cmpgeui	r2,r2,10
    2388:	1000041e 	bne	r2,zero,239c <alt_printf+0x160>
                            c = '0' + digit;
    238c:	e0bffc17 	ldw	r2,-16(fp)
    2390:	10800c04 	addi	r2,r2,48
    2394:	e0bff805 	stb	r2,-32(fp)
    2398:	00000306 	br	23a8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
    239c:	e0bffc17 	ldw	r2,-16(fp)
    23a0:	108015c4 	addi	r2,r2,87
    23a4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
    23a8:	e0bff807 	ldb	r2,-32(fp)
    23ac:	1009883a 	mov	r4,r2
    23b0:	00024680 	call	2468 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    23b4:	e0bff917 	ldw	r2,-28(fp)
    23b8:	10bfff04 	addi	r2,r2,-4
    23bc:	e0bff915 	stw	r2,-28(fp)
    23c0:	e0bff917 	ldw	r2,-28(fp)
    23c4:	103fe50e 	bge	r2,zero,235c <_gp+0xffff7970>
    23c8:	00001806 	br	242c <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    23cc:	e0bff807 	ldb	r2,-32(fp)
    23d0:	10801cd8 	cmpnei	r2,r2,115
    23d4:	1000151e 	bne	r2,zero,242c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    23d8:	e0bffe17 	ldw	r2,-8(fp)
    23dc:	10c00104 	addi	r3,r2,4
    23e0:	e0fffe15 	stw	r3,-8(fp)
    23e4:	10800017 	ldw	r2,0(r2)
    23e8:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
    23ec:	00000906 	br	2414 <alt_printf+0x1d8>
                      alt_putchar(*s++);
    23f0:	e0bffa17 	ldw	r2,-24(fp)
    23f4:	10c00044 	addi	r3,r2,1
    23f8:	e0fffa15 	stw	r3,-24(fp)
    23fc:	10800003 	ldbu	r2,0(r2)
    2400:	10803fcc 	andi	r2,r2,255
    2404:	1080201c 	xori	r2,r2,128
    2408:	10bfe004 	addi	r2,r2,-128
    240c:	1009883a 	mov	r4,r2
    2410:	00024680 	call	2468 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    2414:	e0bffa17 	ldw	r2,-24(fp)
    2418:	10800003 	ldbu	r2,0(r2)
    241c:	10803fcc 	andi	r2,r2,255
    2420:	1080201c 	xori	r2,r2,128
    2424:	10bfe004 	addi	r2,r2,-128
    2428:	103ff11e 	bne	r2,zero,23f0 <_gp+0xffff7a04>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    242c:	e0bff717 	ldw	r2,-36(fp)
    2430:	10c00044 	addi	r3,r2,1
    2434:	e0fff715 	stw	r3,-36(fp)
    2438:	10800003 	ldbu	r2,0(r2)
    243c:	e0bff805 	stb	r2,-32(fp)
    2440:	e0bff807 	ldb	r2,-32(fp)
    2444:	103f8a1e 	bne	r2,zero,2270 <_gp+0xffff7884>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    2448:	00000106 	br	2450 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
    244c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    2450:	0001883a 	nop
    2454:	e037883a 	mov	sp,fp
    2458:	dfc00117 	ldw	ra,4(sp)
    245c:	df000017 	ldw	fp,0(sp)
    2460:	dec00504 	addi	sp,sp,20
    2464:	f800283a 	ret

00002468 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2468:	defffc04 	addi	sp,sp,-16
    246c:	dfc00315 	stw	ra,12(sp)
    2470:	df000215 	stw	fp,8(sp)
    2474:	df000204 	addi	fp,sp,8
    2478:	e13fff15 	stw	r4,-4(fp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    247c:	e0bfff17 	ldw	r2,-4(fp)
    2480:	e0bffe05 	stb	r2,-8(fp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2484:	000f883a 	mov	r7,zero
    2488:	01800044 	movi	r6,1
    248c:	e17ffe04 	addi	r5,fp,-8
    2490:	01000034 	movhi	r4,0
    2494:	210a7b04 	addi	r4,r4,10732
    2498:	000254c0 	call	254c <altera_avalon_jtag_uart_write>
    249c:	10bfffd8 	cmpnei	r2,r2,-1
    24a0:	1000021e 	bne	r2,zero,24ac <alt_putchar+0x44>
        return -1;
    24a4:	00bfffc4 	movi	r2,-1
    24a8:	00000106 	br	24b0 <alt_putchar+0x48>
    }
    return c;
    24ac:	e0bfff17 	ldw	r2,-4(fp)
#else
    return putchar(c);
#endif
#endif
}
    24b0:	e037883a 	mov	sp,fp
    24b4:	dfc00117 	ldw	ra,4(sp)
    24b8:	df000017 	ldw	fp,0(sp)
    24bc:	dec00204 	addi	sp,sp,8
    24c0:	f800283a 	ret

000024c4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    24c4:	defffd04 	addi	sp,sp,-12
    24c8:	dfc00215 	stw	ra,8(sp)
    24cc:	df000115 	stw	fp,4(sp)
    24d0:	df000104 	addi	fp,sp,4
    24d4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    24d8:	e13fff17 	ldw	r4,-4(fp)
    24dc:	00025e00 	call	25e0 <alt_busy_sleep>
}
    24e0:	e037883a 	mov	sp,fp
    24e4:	dfc00117 	ldw	ra,4(sp)
    24e8:	df000017 	ldw	fp,0(sp)
    24ec:	dec00204 	addi	sp,sp,8
    24f0:	f800283a 	ret

000024f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    24f4:	defffd04 	addi	sp,sp,-12
    24f8:	dfc00215 	stw	ra,8(sp)
    24fc:	df000115 	stw	fp,4(sp)
    2500:	df000104 	addi	fp,sp,4
    2504:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
    2508:	00027780 	call	2778 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    250c:	00800044 	movi	r2,1
    2510:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2514:	0001883a 	nop
    2518:	e037883a 	mov	sp,fp
    251c:	dfc00117 	ldw	ra,4(sp)
    2520:	df000017 	ldw	fp,0(sp)
    2524:	dec00204 	addi	sp,sp,8
    2528:	f800283a 	ret

0000252c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    252c:	deffff04 	addi	sp,sp,-4
    2530:	df000015 	stw	fp,0(sp)
    2534:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
}
    2538:	0001883a 	nop
    253c:	e037883a 	mov	sp,fp
    2540:	df000017 	ldw	fp,0(sp)
    2544:	dec00104 	addi	sp,sp,4
    2548:	f800283a 	ret

0000254c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    254c:	defff904 	addi	sp,sp,-28
    2550:	df000615 	stw	fp,24(sp)
    2554:	df000604 	addi	fp,sp,24
    2558:	e13ffc15 	stw	r4,-16(fp)
    255c:	e17ffd15 	stw	r5,-12(fp)
    2560:	e1bffe15 	stw	r6,-8(fp)
    2564:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    2568:	e0bffc17 	ldw	r2,-16(fp)
    256c:	10800017 	ldw	r2,0(r2)
    2570:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    2574:	e0bffe17 	ldw	r2,-8(fp)
    2578:	e0fffd17 	ldw	r3,-12(fp)
    257c:	1885883a 	add	r2,r3,r2
    2580:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    2584:	00000e06 	br	25c0 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2588:	e0bffa17 	ldw	r2,-24(fp)
    258c:	10800104 	addi	r2,r2,4
    2590:	10800037 	ldwio	r2,0(r2)
    2594:	10bfffec 	andhi	r2,r2,65535
    2598:	10000926 	beq	r2,zero,25c0 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    259c:	e0fffa17 	ldw	r3,-24(fp)
    25a0:	e0bffd17 	ldw	r2,-12(fp)
    25a4:	11000044 	addi	r4,r2,1
    25a8:	e13ffd15 	stw	r4,-12(fp)
    25ac:	10800003 	ldbu	r2,0(r2)
    25b0:	10803fcc 	andi	r2,r2,255
    25b4:	1080201c 	xori	r2,r2,128
    25b8:	10bfe004 	addi	r2,r2,-128
    25bc:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    25c0:	e0fffd17 	ldw	r3,-12(fp)
    25c4:	e0bffb17 	ldw	r2,-20(fp)
    25c8:	18bfef36 	bltu	r3,r2,2588 <_gp+0xffff7b9c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    25cc:	e0bffe17 	ldw	r2,-8(fp)
}
    25d0:	e037883a 	mov	sp,fp
    25d4:	df000017 	ldw	fp,0(sp)
    25d8:	dec00104 	addi	sp,sp,4
    25dc:	f800283a 	ret

000025e0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    25e0:	defffa04 	addi	sp,sp,-24
    25e4:	dfc00515 	stw	ra,20(sp)
    25e8:	df000415 	stw	fp,16(sp)
    25ec:	df000404 	addi	fp,sp,16
    25f0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    25f4:	00800244 	movi	r2,9
    25f8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    25fc:	014003f4 	movhi	r5,15
    2600:	29509004 	addi	r5,r5,16960
    2604:	e13ffd17 	ldw	r4,-12(fp)
    2608:	00029500 	call	2950 <__mulsi3>
    260c:	100b883a 	mov	r5,r2
    2610:	01005f74 	movhi	r4,381
    2614:	211e1004 	addi	r4,r4,30784
    2618:	00028940 	call	2894 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    261c:	100b883a 	mov	r5,r2
    2620:	01200034 	movhi	r4,32768
    2624:	213fffc4 	addi	r4,r4,-1
    2628:	00028940 	call	2894 <__udivsi3>
    262c:	100b883a 	mov	r5,r2
    2630:	e13fff17 	ldw	r4,-4(fp)
    2634:	00028940 	call	2894 <__udivsi3>
    2638:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    263c:	e0bffe17 	ldw	r2,-8(fp)
    2640:	10002a26 	beq	r2,zero,26ec <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    2644:	e03ffc15 	stw	zero,-16(fp)
    2648:	00001706 	br	26a8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    264c:	00a00034 	movhi	r2,32768
    2650:	10bfffc4 	addi	r2,r2,-1
    2654:	10bfffc4 	addi	r2,r2,-1
    2658:	103ffe1e 	bne	r2,zero,2654 <_gp+0xffff7c68>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    265c:	014003f4 	movhi	r5,15
    2660:	29509004 	addi	r5,r5,16960
    2664:	e13ffd17 	ldw	r4,-12(fp)
    2668:	00029500 	call	2950 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    266c:	100b883a 	mov	r5,r2
    2670:	01005f74 	movhi	r4,381
    2674:	211e1004 	addi	r4,r4,30784
    2678:	00028940 	call	2894 <__udivsi3>
    267c:	100b883a 	mov	r5,r2
    2680:	01200034 	movhi	r4,32768
    2684:	213fffc4 	addi	r4,r4,-1
    2688:	00028940 	call	2894 <__udivsi3>
    268c:	1007883a 	mov	r3,r2
    2690:	e0bfff17 	ldw	r2,-4(fp)
    2694:	10c5c83a 	sub	r2,r2,r3
    2698:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    269c:	e0bffc17 	ldw	r2,-16(fp)
    26a0:	10800044 	addi	r2,r2,1
    26a4:	e0bffc15 	stw	r2,-16(fp)
    26a8:	e0fffc17 	ldw	r3,-16(fp)
    26ac:	e0bffe17 	ldw	r2,-8(fp)
    26b0:	18bfe616 	blt	r3,r2,264c <_gp+0xffff7c60>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    26b4:	014003f4 	movhi	r5,15
    26b8:	29509004 	addi	r5,r5,16960
    26bc:	e13ffd17 	ldw	r4,-12(fp)
    26c0:	00029500 	call	2950 <__mulsi3>
    26c4:	100b883a 	mov	r5,r2
    26c8:	01005f74 	movhi	r4,381
    26cc:	211e1004 	addi	r4,r4,30784
    26d0:	00028940 	call	2894 <__udivsi3>
    26d4:	e17fff17 	ldw	r5,-4(fp)
    26d8:	1009883a 	mov	r4,r2
    26dc:	00029500 	call	2950 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    26e0:	10bfffc4 	addi	r2,r2,-1
    26e4:	103ffe1e 	bne	r2,zero,26e0 <_gp+0xffff7cf4>
    26e8:	00000d06 	br	2720 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    26ec:	014003f4 	movhi	r5,15
    26f0:	29509004 	addi	r5,r5,16960
    26f4:	e13ffd17 	ldw	r4,-12(fp)
    26f8:	00029500 	call	2950 <__mulsi3>
    26fc:	100b883a 	mov	r5,r2
    2700:	01005f74 	movhi	r4,381
    2704:	211e1004 	addi	r4,r4,30784
    2708:	00028940 	call	2894 <__udivsi3>
    270c:	e17fff17 	ldw	r5,-4(fp)
    2710:	1009883a 	mov	r4,r2
    2714:	00029500 	call	2950 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    2718:	10bfffc4 	addi	r2,r2,-1
    271c:	00bffe16 	blt	zero,r2,2718 <_gp+0xffff7d2c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    2720:	0005883a 	mov	r2,zero
}
    2724:	e037883a 	mov	sp,fp
    2728:	dfc00117 	ldw	ra,4(sp)
    272c:	df000017 	ldw	fp,0(sp)
    2730:	dec00204 	addi	sp,sp,8
    2734:	f800283a 	ret

00002738 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2738:	deffff04 	addi	sp,sp,-4
    273c:	df000015 	stw	fp,0(sp)
    2740:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2744:	0001883a 	nop
    2748:	e037883a 	mov	sp,fp
    274c:	df000017 	ldw	fp,0(sp)
    2750:	dec00104 	addi	sp,sp,4
    2754:	f800283a 	ret

00002758 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2758:	deffff04 	addi	sp,sp,-4
    275c:	df000015 	stw	fp,0(sp)
    2760:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    2764:	0001883a 	nop
    2768:	e037883a 	mov	sp,fp
    276c:	df000017 	ldw	fp,0(sp)
    2770:	dec00104 	addi	sp,sp,4
    2774:	f800283a 	ret

00002778 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    2778:	deffff04 	addi	sp,sp,-4
    277c:	df000015 	stw	fp,0(sp)
    2780:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2784:	000170fa 	wrctl	ienable,zero
}
    2788:	0001883a 	nop
    278c:	e037883a 	mov	sp,fp
    2790:	df000017 	ldw	fp,0(sp)
    2794:	dec00104 	addi	sp,sp,4
    2798:	f800283a 	ret

0000279c <__divsi3>:
    279c:	20001b16 	blt	r4,zero,280c <__divsi3+0x70>
    27a0:	000f883a 	mov	r7,zero
    27a4:	28001616 	blt	r5,zero,2800 <__divsi3+0x64>
    27a8:	200d883a 	mov	r6,r4
    27ac:	29001a2e 	bgeu	r5,r4,2818 <__divsi3+0x7c>
    27b0:	00800804 	movi	r2,32
    27b4:	00c00044 	movi	r3,1
    27b8:	00000106 	br	27c0 <__divsi3+0x24>
    27bc:	10000d26 	beq	r2,zero,27f4 <__divsi3+0x58>
    27c0:	294b883a 	add	r5,r5,r5
    27c4:	10bfffc4 	addi	r2,r2,-1
    27c8:	18c7883a 	add	r3,r3,r3
    27cc:	293ffb36 	bltu	r5,r4,27bc <_gp+0xffff7dd0>
    27d0:	0005883a 	mov	r2,zero
    27d4:	18000726 	beq	r3,zero,27f4 <__divsi3+0x58>
    27d8:	0005883a 	mov	r2,zero
    27dc:	31400236 	bltu	r6,r5,27e8 <__divsi3+0x4c>
    27e0:	314dc83a 	sub	r6,r6,r5
    27e4:	10c4b03a 	or	r2,r2,r3
    27e8:	1806d07a 	srli	r3,r3,1
    27ec:	280ad07a 	srli	r5,r5,1
    27f0:	183ffa1e 	bne	r3,zero,27dc <_gp+0xffff7df0>
    27f4:	38000126 	beq	r7,zero,27fc <__divsi3+0x60>
    27f8:	0085c83a 	sub	r2,zero,r2
    27fc:	f800283a 	ret
    2800:	014bc83a 	sub	r5,zero,r5
    2804:	39c0005c 	xori	r7,r7,1
    2808:	003fe706 	br	27a8 <_gp+0xffff7dbc>
    280c:	0109c83a 	sub	r4,zero,r4
    2810:	01c00044 	movi	r7,1
    2814:	003fe306 	br	27a4 <_gp+0xffff7db8>
    2818:	00c00044 	movi	r3,1
    281c:	003fee06 	br	27d8 <_gp+0xffff7dec>

00002820 <__modsi3>:
    2820:	20001716 	blt	r4,zero,2880 <__modsi3+0x60>
    2824:	000f883a 	mov	r7,zero
    2828:	2005883a 	mov	r2,r4
    282c:	28001216 	blt	r5,zero,2878 <__modsi3+0x58>
    2830:	2900162e 	bgeu	r5,r4,288c <__modsi3+0x6c>
    2834:	01800804 	movi	r6,32
    2838:	00c00044 	movi	r3,1
    283c:	00000106 	br	2844 <__modsi3+0x24>
    2840:	30000a26 	beq	r6,zero,286c <__modsi3+0x4c>
    2844:	294b883a 	add	r5,r5,r5
    2848:	31bfffc4 	addi	r6,r6,-1
    284c:	18c7883a 	add	r3,r3,r3
    2850:	293ffb36 	bltu	r5,r4,2840 <_gp+0xffff7e54>
    2854:	18000526 	beq	r3,zero,286c <__modsi3+0x4c>
    2858:	1806d07a 	srli	r3,r3,1
    285c:	11400136 	bltu	r2,r5,2864 <__modsi3+0x44>
    2860:	1145c83a 	sub	r2,r2,r5
    2864:	280ad07a 	srli	r5,r5,1
    2868:	183ffb1e 	bne	r3,zero,2858 <_gp+0xffff7e6c>
    286c:	38000126 	beq	r7,zero,2874 <__modsi3+0x54>
    2870:	0085c83a 	sub	r2,zero,r2
    2874:	f800283a 	ret
    2878:	014bc83a 	sub	r5,zero,r5
    287c:	003fec06 	br	2830 <_gp+0xffff7e44>
    2880:	0109c83a 	sub	r4,zero,r4
    2884:	01c00044 	movi	r7,1
    2888:	003fe706 	br	2828 <_gp+0xffff7e3c>
    288c:	00c00044 	movi	r3,1
    2890:	003ff106 	br	2858 <_gp+0xffff7e6c>

00002894 <__udivsi3>:
    2894:	200d883a 	mov	r6,r4
    2898:	2900152e 	bgeu	r5,r4,28f0 <__udivsi3+0x5c>
    289c:	28001416 	blt	r5,zero,28f0 <__udivsi3+0x5c>
    28a0:	00800804 	movi	r2,32
    28a4:	00c00044 	movi	r3,1
    28a8:	00000206 	br	28b4 <__udivsi3+0x20>
    28ac:	10000e26 	beq	r2,zero,28e8 <__udivsi3+0x54>
    28b0:	28000516 	blt	r5,zero,28c8 <__udivsi3+0x34>
    28b4:	294b883a 	add	r5,r5,r5
    28b8:	10bfffc4 	addi	r2,r2,-1
    28bc:	18c7883a 	add	r3,r3,r3
    28c0:	293ffa36 	bltu	r5,r4,28ac <_gp+0xffff7ec0>
    28c4:	18000826 	beq	r3,zero,28e8 <__udivsi3+0x54>
    28c8:	0005883a 	mov	r2,zero
    28cc:	31400236 	bltu	r6,r5,28d8 <__udivsi3+0x44>
    28d0:	314dc83a 	sub	r6,r6,r5
    28d4:	10c4b03a 	or	r2,r2,r3
    28d8:	1806d07a 	srli	r3,r3,1
    28dc:	280ad07a 	srli	r5,r5,1
    28e0:	183ffa1e 	bne	r3,zero,28cc <_gp+0xffff7ee0>
    28e4:	f800283a 	ret
    28e8:	0005883a 	mov	r2,zero
    28ec:	f800283a 	ret
    28f0:	00c00044 	movi	r3,1
    28f4:	003ff406 	br	28c8 <_gp+0xffff7edc>

000028f8 <__umodsi3>:
    28f8:	2005883a 	mov	r2,r4
    28fc:	2900122e 	bgeu	r5,r4,2948 <__umodsi3+0x50>
    2900:	28001116 	blt	r5,zero,2948 <__umodsi3+0x50>
    2904:	01800804 	movi	r6,32
    2908:	00c00044 	movi	r3,1
    290c:	00000206 	br	2918 <__umodsi3+0x20>
    2910:	30000c26 	beq	r6,zero,2944 <__umodsi3+0x4c>
    2914:	28000516 	blt	r5,zero,292c <__umodsi3+0x34>
    2918:	294b883a 	add	r5,r5,r5
    291c:	31bfffc4 	addi	r6,r6,-1
    2920:	18c7883a 	add	r3,r3,r3
    2924:	293ffa36 	bltu	r5,r4,2910 <_gp+0xffff7f24>
    2928:	18000626 	beq	r3,zero,2944 <__umodsi3+0x4c>
    292c:	1806d07a 	srli	r3,r3,1
    2930:	11400136 	bltu	r2,r5,2938 <__umodsi3+0x40>
    2934:	1145c83a 	sub	r2,r2,r5
    2938:	280ad07a 	srli	r5,r5,1
    293c:	183ffb1e 	bne	r3,zero,292c <_gp+0xffff7f40>
    2940:	f800283a 	ret
    2944:	f800283a 	ret
    2948:	00c00044 	movi	r3,1
    294c:	003ff706 	br	292c <_gp+0xffff7f40>

00002950 <__mulsi3>:
    2950:	0005883a 	mov	r2,zero
    2954:	20000726 	beq	r4,zero,2974 <__mulsi3+0x24>
    2958:	20c0004c 	andi	r3,r4,1
    295c:	2008d07a 	srli	r4,r4,1
    2960:	18000126 	beq	r3,zero,2968 <__mulsi3+0x18>
    2964:	1145883a 	add	r2,r2,r5
    2968:	294b883a 	add	r5,r5,r5
    296c:	203ffa1e 	bne	r4,zero,2958 <_gp+0xffff7f6c>
    2970:	f800283a 	ret
    2974:	f800283a 	ret
