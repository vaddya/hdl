
lab2_sw.elf:     file format elf32-littlenios2
lab2_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000634 memsz 0x00000640 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00002020  00002020  00001654  2**0
                  CONTENTS
  2 .text         00000634  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00002654  00002654  00001654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000000  00002654  00002654  00001654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000000c  00002654  00002654  00001654  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00002660  00002660  00001654  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000188  00000000  00000000  00001678  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000b84  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000005d2  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000006d1  00000000  00000000  00002956  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000298  00000000  00000000  00003028  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000005d1  00000000  00000000  000032c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000561  00000000  00000000  00003891  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00003df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000080  00000000  00000000  00003e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00004c86  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00004c89  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00004c93  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004c94  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00004c95  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00004c99  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00004c9d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00004ca1  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001c  00000000  00000000  00004caa  2**0
                  CONTENTS, READONLY
 26 .jdi          00003b40  00000000  00000000  00004cc6  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003243b  00000000  00000000  00008806  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002020 l    d  .text	00000000 .text
00002654 l    d  .rodata	00000000 .rodata
00002654 l    d  .rwdata	00000000 .rwdata
00002654 l    d  .bss	00000000 .bss
00002660 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab2_sw_bsp//obj/HAL/src/crt0.o
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 lab2_source.c
00000000 l    df *ABS*	00000000 alt_load.c
000020f4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
000021e0 g     F .text	00000054 alt_main
00002654 g       *ABS*	00000000 __flash_rwdata_start
00002454 g     F .text	00000024 altera_nios2_gen2_irq_init
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00002658 g     O .bss	00000004 alt_argv
0000a654 g       *ABS*	00000000 _gp
00002234 g     F .text	00000030 usleep
00002570 g     F .text	00000064 .hidden __udivsi3
00002660 g       *ABS*	00000000 __bss_end
00002000 g       *ABS*	00000000 __alt_mem_onchip_mem
00002414 g     F .text	00000020 alt_dcache_flush_all
00002654 g       *ABS*	00000000 __ram_rwdata_end
00002654 g       *ABS*	00000000 __ram_rodata_end
000025d4 g     F .text	00000058 .hidden __umodsi3
00002660 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002020 g     F .text	0000003c _start
0000229c g     F .text	00000020 alt_sys_init
0000262c g     F .text	00000028 .hidden __mulsi3
00002654 g       *ABS*	00000000 __ram_rwdata_start
00002654 g       *ABS*	00000000 __ram_rodata_start
000022bc g     F .text	00000158 alt_busy_sleep
00002660 g       *ABS*	00000000 __alt_stack_base
00002654 g       *ABS*	00000000 __bss_start
0000205c g     F .text	00000098 main
0000265c g     O .bss	00000004 alt_envp
00002478 g     F .text	00000084 .hidden __divsi3
00002654 g       *ABS*	00000000 __flash_rodata_start
00002264 g     F .text	00000038 alt_irq_init
00002654 g     O .bss	00000004 alt_argc
00002020 g       *ABS*	00000000 __ram_exceptions_start
00002654 g       *ABS*	00000000 _edata
00002660 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
000024fc g     F .text	00000074 .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit
00002434 g     F .text	00000020 alt_icache_flush_all
0000215c g     F .text	00000084 alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6a99514 	ori	gp,gp,42580
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	10899514 	ori	r2,r2,9812

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18c99814 	ori	r3,r3,9824

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_gp+0xffff79f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	000215c0 	call	215c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	00021e00 	call	21e0 <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <_gp+0xffff7a04>

0000205c <main>:
#include <unistd.h>
#define NONE_PRESSED 0x1 // Value read from button PIO when no buttons pressed
#define DEBOUNCE 30000 // Time in microseconds to wait for switch debounce

int main(void)
{
    205c:	defffc04 	addi	sp,sp,-16
    2060:	dfc00315 	stw	ra,12(sp)
    2064:	df000215 	stw	fp,8(sp)
    2068:	df000204 	addi	fp,sp,8
	int buttons; // Use to hold button value
	int led = 0x00; // Use to write to led
    206c:	e03fff15 	stw	zero,-4(fp)
	while (1) { // Read buttons via pio
		buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
    2070:	00940804 	movi	r2,20512
    2074:	10800037 	ldwio	r2,0(r2)
    2078:	e0bffe15 	stw	r2,-8(fp)
		if (buttons != NONE_PRESSED) { // if button pressed
    207c:	e0bffe17 	ldw	r2,-8(fp)
    2080:	10800060 	cmpeqi	r2,r2,1
    2084:	103ffa1e 	bne	r2,zero,2070 <_gp+0xffff7a1c>
			if (led >= 0x80 || led==0x00)
    2088:	e0bfff17 	ldw	r2,-4(fp)
    208c:	10802008 	cmpgei	r2,r2,128
    2090:	1000021e 	bne	r2,zero,209c <main+0x40>
    2094:	e0bfff17 	ldw	r2,-4(fp)
    2098:	1000031e 	bne	r2,zero,20a8 <main+0x4c>
				led = 0x01; // reset pattern
    209c:	00800044 	movi	r2,1
    20a0:	e0bfff15 	stw	r2,-4(fp)
    20a4:	00000306 	br	20b4 <main+0x58>
			else
				led = led << 1; // shift left on board (led0 is far right)
    20a8:	e0bfff17 	ldw	r2,-4(fp)
    20ac:	1085883a 	add	r2,r2,r2
    20b0:	e0bfff15 	stw	r2,-4(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,~led); // Write new value to pio
    20b4:	e0bfff17 	ldw	r2,-4(fp)
    20b8:	0086303a 	nor	r3,zero,r2
    20bc:	00940c04 	movi	r2,20528
    20c0:	10c00035 	stwio	r3,0(r2)
			// Switch debounce routine
			usleep (DEBOUNCE);
    20c4:	011d4c04 	movi	r4,30000
    20c8:	00022340 	call	2234 <usleep>
			while (buttons != NONE_PRESSED) // wait for button release
    20cc:	00000306 	br	20dc <main+0x80>
			buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
    20d0:	00940804 	movi	r2,20512
    20d4:	10800037 	ldwio	r2,0(r2)
    20d8:	e0bffe15 	stw	r2,-8(fp)
			else
				led = led << 1; // shift left on board (led0 is far right)
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,~led); // Write new value to pio
			// Switch debounce routine
			usleep (DEBOUNCE);
			while (buttons != NONE_PRESSED) // wait for button release
    20dc:	e0bffe17 	ldw	r2,-8(fp)
    20e0:	10800058 	cmpnei	r2,r2,1
    20e4:	103ffa1e 	bne	r2,zero,20d0 <_gp+0xffff7a7c>
			buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
			usleep (DEBOUNCE);
    20e8:	011d4c04 	movi	r4,30000
    20ec:	00022340 	call	2234 <usleep>
		}
	}
    20f0:	003fdf06 	br	2070 <_gp+0xffff7a1c>

000020f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    20f4:	defffc04 	addi	sp,sp,-16
    20f8:	df000315 	stw	fp,12(sp)
    20fc:	df000304 	addi	fp,sp,12
    2100:	e13ffd15 	stw	r4,-12(fp)
    2104:	e17ffe15 	stw	r5,-8(fp)
    2108:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    210c:	e0fffe17 	ldw	r3,-8(fp)
    2110:	e0bffd17 	ldw	r2,-12(fp)
    2114:	18800c26 	beq	r3,r2,2148 <alt_load_section+0x54>
  {
    while( to != end )
    2118:	00000806 	br	213c <alt_load_section+0x48>
    {
      *to++ = *from++;
    211c:	e0bffe17 	ldw	r2,-8(fp)
    2120:	10c00104 	addi	r3,r2,4
    2124:	e0fffe15 	stw	r3,-8(fp)
    2128:	e0fffd17 	ldw	r3,-12(fp)
    212c:	19000104 	addi	r4,r3,4
    2130:	e13ffd15 	stw	r4,-12(fp)
    2134:	18c00017 	ldw	r3,0(r3)
    2138:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    213c:	e0fffe17 	ldw	r3,-8(fp)
    2140:	e0bfff17 	ldw	r2,-4(fp)
    2144:	18bff51e 	bne	r3,r2,211c <_gp+0xffff7ac8>
    {
      *to++ = *from++;
    }
  }
}
    2148:	0001883a 	nop
    214c:	e037883a 	mov	sp,fp
    2150:	df000017 	ldw	fp,0(sp)
    2154:	dec00104 	addi	sp,sp,4
    2158:	f800283a 	ret

0000215c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    215c:	defffe04 	addi	sp,sp,-8
    2160:	dfc00115 	stw	ra,4(sp)
    2164:	df000015 	stw	fp,0(sp)
    2168:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    216c:	01800034 	movhi	r6,0
    2170:	31899504 	addi	r6,r6,9812
    2174:	01400034 	movhi	r5,0
    2178:	29499504 	addi	r5,r5,9812
    217c:	01000034 	movhi	r4,0
    2180:	21099504 	addi	r4,r4,9812
    2184:	00020f40 	call	20f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    2188:	01800034 	movhi	r6,0
    218c:	31880804 	addi	r6,r6,8224
    2190:	01400034 	movhi	r5,0
    2194:	29480804 	addi	r5,r5,8224
    2198:	01000034 	movhi	r4,0
    219c:	21080804 	addi	r4,r4,8224
    21a0:	00020f40 	call	20f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    21a4:	01800034 	movhi	r6,0
    21a8:	31899504 	addi	r6,r6,9812
    21ac:	01400034 	movhi	r5,0
    21b0:	29499504 	addi	r5,r5,9812
    21b4:	01000034 	movhi	r4,0
    21b8:	21099504 	addi	r4,r4,9812
    21bc:	00020f40 	call	20f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    21c0:	00024140 	call	2414 <alt_dcache_flush_all>
  alt_icache_flush_all();
    21c4:	00024340 	call	2434 <alt_icache_flush_all>
}
    21c8:	0001883a 	nop
    21cc:	e037883a 	mov	sp,fp
    21d0:	dfc00117 	ldw	ra,4(sp)
    21d4:	df000017 	ldw	fp,0(sp)
    21d8:	dec00204 	addi	sp,sp,8
    21dc:	f800283a 	ret

000021e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    21e0:	defffe04 	addi	sp,sp,-8
    21e4:	dfc00115 	stw	ra,4(sp)
    21e8:	df000015 	stw	fp,0(sp)
    21ec:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    21f0:	0009883a 	mov	r4,zero
    21f4:	00022640 	call	2264 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    21f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    21fc:	000229c0 	call	229c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2200:	d0a00017 	ldw	r2,-32768(gp)
    2204:	d0e00117 	ldw	r3,-32764(gp)
    2208:	d1200217 	ldw	r4,-32760(gp)
    220c:	200d883a 	mov	r6,r4
    2210:	180b883a 	mov	r5,r3
    2214:	1009883a 	mov	r4,r2
    2218:	000205c0 	call	205c <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    221c:	0001883a 	nop
    2220:	e037883a 	mov	sp,fp
    2224:	dfc00117 	ldw	ra,4(sp)
    2228:	df000017 	ldw	fp,0(sp)
    222c:	dec00204 	addi	sp,sp,8
    2230:	f800283a 	ret

00002234 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    2234:	defffd04 	addi	sp,sp,-12
    2238:	dfc00215 	stw	ra,8(sp)
    223c:	df000115 	stw	fp,4(sp)
    2240:	df000104 	addi	fp,sp,4
    2244:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    2248:	e13fff17 	ldw	r4,-4(fp)
    224c:	00022bc0 	call	22bc <alt_busy_sleep>
}
    2250:	e037883a 	mov	sp,fp
    2254:	dfc00117 	ldw	ra,4(sp)
    2258:	df000017 	ldw	fp,0(sp)
    225c:	dec00204 	addi	sp,sp,8
    2260:	f800283a 	ret

00002264 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2264:	defffd04 	addi	sp,sp,-12
    2268:	dfc00215 	stw	ra,8(sp)
    226c:	df000115 	stw	fp,4(sp)
    2270:	df000104 	addi	fp,sp,4
    2274:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
    2278:	00024540 	call	2454 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    227c:	00800044 	movi	r2,1
    2280:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2284:	0001883a 	nop
    2288:	e037883a 	mov	sp,fp
    228c:	dfc00117 	ldw	ra,4(sp)
    2290:	df000017 	ldw	fp,0(sp)
    2294:	dec00204 	addi	sp,sp,8
    2298:	f800283a 	ret

0000229c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    229c:	deffff04 	addi	sp,sp,-4
    22a0:	df000015 	stw	fp,0(sp)
    22a4:	d839883a 	mov	fp,sp
}
    22a8:	0001883a 	nop
    22ac:	e037883a 	mov	sp,fp
    22b0:	df000017 	ldw	fp,0(sp)
    22b4:	dec00104 	addi	sp,sp,4
    22b8:	f800283a 	ret

000022bc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    22bc:	defffa04 	addi	sp,sp,-24
    22c0:	dfc00515 	stw	ra,20(sp)
    22c4:	df000415 	stw	fp,16(sp)
    22c8:	df000404 	addi	fp,sp,16
    22cc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    22d0:	00800244 	movi	r2,9
    22d4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    22d8:	014003f4 	movhi	r5,15
    22dc:	29509004 	addi	r5,r5,16960
    22e0:	e13ffd17 	ldw	r4,-12(fp)
    22e4:	000262c0 	call	262c <__mulsi3>
    22e8:	100b883a 	mov	r5,r2
    22ec:	01005f74 	movhi	r4,381
    22f0:	211e1004 	addi	r4,r4,30784
    22f4:	00025700 	call	2570 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    22f8:	100b883a 	mov	r5,r2
    22fc:	01200034 	movhi	r4,32768
    2300:	213fffc4 	addi	r4,r4,-1
    2304:	00025700 	call	2570 <__udivsi3>
    2308:	100b883a 	mov	r5,r2
    230c:	e13fff17 	ldw	r4,-4(fp)
    2310:	00025700 	call	2570 <__udivsi3>
    2314:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    2318:	e0bffe17 	ldw	r2,-8(fp)
    231c:	10002a26 	beq	r2,zero,23c8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    2320:	e03ffc15 	stw	zero,-16(fp)
    2324:	00001706 	br	2384 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2328:	00a00034 	movhi	r2,32768
    232c:	10bfffc4 	addi	r2,r2,-1
    2330:	10bfffc4 	addi	r2,r2,-1
    2334:	103ffe1e 	bne	r2,zero,2330 <_gp+0xffff7cdc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    2338:	014003f4 	movhi	r5,15
    233c:	29509004 	addi	r5,r5,16960
    2340:	e13ffd17 	ldw	r4,-12(fp)
    2344:	000262c0 	call	262c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    2348:	100b883a 	mov	r5,r2
    234c:	01005f74 	movhi	r4,381
    2350:	211e1004 	addi	r4,r4,30784
    2354:	00025700 	call	2570 <__udivsi3>
    2358:	100b883a 	mov	r5,r2
    235c:	01200034 	movhi	r4,32768
    2360:	213fffc4 	addi	r4,r4,-1
    2364:	00025700 	call	2570 <__udivsi3>
    2368:	1007883a 	mov	r3,r2
    236c:	e0bfff17 	ldw	r2,-4(fp)
    2370:	10c5c83a 	sub	r2,r2,r3
    2374:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    2378:	e0bffc17 	ldw	r2,-16(fp)
    237c:	10800044 	addi	r2,r2,1
    2380:	e0bffc15 	stw	r2,-16(fp)
    2384:	e0fffc17 	ldw	r3,-16(fp)
    2388:	e0bffe17 	ldw	r2,-8(fp)
    238c:	18bfe616 	blt	r3,r2,2328 <_gp+0xffff7cd4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    2390:	014003f4 	movhi	r5,15
    2394:	29509004 	addi	r5,r5,16960
    2398:	e13ffd17 	ldw	r4,-12(fp)
    239c:	000262c0 	call	262c <__mulsi3>
    23a0:	100b883a 	mov	r5,r2
    23a4:	01005f74 	movhi	r4,381
    23a8:	211e1004 	addi	r4,r4,30784
    23ac:	00025700 	call	2570 <__udivsi3>
    23b0:	e17fff17 	ldw	r5,-4(fp)
    23b4:	1009883a 	mov	r4,r2
    23b8:	000262c0 	call	262c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    23bc:	10bfffc4 	addi	r2,r2,-1
    23c0:	103ffe1e 	bne	r2,zero,23bc <_gp+0xffff7d68>
    23c4:	00000d06 	br	23fc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    23c8:	014003f4 	movhi	r5,15
    23cc:	29509004 	addi	r5,r5,16960
    23d0:	e13ffd17 	ldw	r4,-12(fp)
    23d4:	000262c0 	call	262c <__mulsi3>
    23d8:	100b883a 	mov	r5,r2
    23dc:	01005f74 	movhi	r4,381
    23e0:	211e1004 	addi	r4,r4,30784
    23e4:	00025700 	call	2570 <__udivsi3>
    23e8:	e17fff17 	ldw	r5,-4(fp)
    23ec:	1009883a 	mov	r4,r2
    23f0:	000262c0 	call	262c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    23f4:	10bfffc4 	addi	r2,r2,-1
    23f8:	00bffe16 	blt	zero,r2,23f4 <_gp+0xffff7da0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    23fc:	0005883a 	mov	r2,zero
}
    2400:	e037883a 	mov	sp,fp
    2404:	dfc00117 	ldw	ra,4(sp)
    2408:	df000017 	ldw	fp,0(sp)
    240c:	dec00204 	addi	sp,sp,8
    2410:	f800283a 	ret

00002414 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2414:	deffff04 	addi	sp,sp,-4
    2418:	df000015 	stw	fp,0(sp)
    241c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2420:	0001883a 	nop
    2424:	e037883a 	mov	sp,fp
    2428:	df000017 	ldw	fp,0(sp)
    242c:	dec00104 	addi	sp,sp,4
    2430:	f800283a 	ret

00002434 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2434:	deffff04 	addi	sp,sp,-4
    2438:	df000015 	stw	fp,0(sp)
    243c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    2440:	0001883a 	nop
    2444:	e037883a 	mov	sp,fp
    2448:	df000017 	ldw	fp,0(sp)
    244c:	dec00104 	addi	sp,sp,4
    2450:	f800283a 	ret

00002454 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    2454:	deffff04 	addi	sp,sp,-4
    2458:	df000015 	stw	fp,0(sp)
    245c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2460:	000170fa 	wrctl	ienable,zero
}
    2464:	0001883a 	nop
    2468:	e037883a 	mov	sp,fp
    246c:	df000017 	ldw	fp,0(sp)
    2470:	dec00104 	addi	sp,sp,4
    2474:	f800283a 	ret

00002478 <__divsi3>:
    2478:	20001b16 	blt	r4,zero,24e8 <__divsi3+0x70>
    247c:	000f883a 	mov	r7,zero
    2480:	28001616 	blt	r5,zero,24dc <__divsi3+0x64>
    2484:	200d883a 	mov	r6,r4
    2488:	29001a2e 	bgeu	r5,r4,24f4 <__divsi3+0x7c>
    248c:	00800804 	movi	r2,32
    2490:	00c00044 	movi	r3,1
    2494:	00000106 	br	249c <__divsi3+0x24>
    2498:	10000d26 	beq	r2,zero,24d0 <__divsi3+0x58>
    249c:	294b883a 	add	r5,r5,r5
    24a0:	10bfffc4 	addi	r2,r2,-1
    24a4:	18c7883a 	add	r3,r3,r3
    24a8:	293ffb36 	bltu	r5,r4,2498 <_gp+0xffff7e44>
    24ac:	0005883a 	mov	r2,zero
    24b0:	18000726 	beq	r3,zero,24d0 <__divsi3+0x58>
    24b4:	0005883a 	mov	r2,zero
    24b8:	31400236 	bltu	r6,r5,24c4 <__divsi3+0x4c>
    24bc:	314dc83a 	sub	r6,r6,r5
    24c0:	10c4b03a 	or	r2,r2,r3
    24c4:	1806d07a 	srli	r3,r3,1
    24c8:	280ad07a 	srli	r5,r5,1
    24cc:	183ffa1e 	bne	r3,zero,24b8 <_gp+0xffff7e64>
    24d0:	38000126 	beq	r7,zero,24d8 <__divsi3+0x60>
    24d4:	0085c83a 	sub	r2,zero,r2
    24d8:	f800283a 	ret
    24dc:	014bc83a 	sub	r5,zero,r5
    24e0:	39c0005c 	xori	r7,r7,1
    24e4:	003fe706 	br	2484 <_gp+0xffff7e30>
    24e8:	0109c83a 	sub	r4,zero,r4
    24ec:	01c00044 	movi	r7,1
    24f0:	003fe306 	br	2480 <_gp+0xffff7e2c>
    24f4:	00c00044 	movi	r3,1
    24f8:	003fee06 	br	24b4 <_gp+0xffff7e60>

000024fc <__modsi3>:
    24fc:	20001716 	blt	r4,zero,255c <__modsi3+0x60>
    2500:	000f883a 	mov	r7,zero
    2504:	2005883a 	mov	r2,r4
    2508:	28001216 	blt	r5,zero,2554 <__modsi3+0x58>
    250c:	2900162e 	bgeu	r5,r4,2568 <__modsi3+0x6c>
    2510:	01800804 	movi	r6,32
    2514:	00c00044 	movi	r3,1
    2518:	00000106 	br	2520 <__modsi3+0x24>
    251c:	30000a26 	beq	r6,zero,2548 <__modsi3+0x4c>
    2520:	294b883a 	add	r5,r5,r5
    2524:	31bfffc4 	addi	r6,r6,-1
    2528:	18c7883a 	add	r3,r3,r3
    252c:	293ffb36 	bltu	r5,r4,251c <_gp+0xffff7ec8>
    2530:	18000526 	beq	r3,zero,2548 <__modsi3+0x4c>
    2534:	1806d07a 	srli	r3,r3,1
    2538:	11400136 	bltu	r2,r5,2540 <__modsi3+0x44>
    253c:	1145c83a 	sub	r2,r2,r5
    2540:	280ad07a 	srli	r5,r5,1
    2544:	183ffb1e 	bne	r3,zero,2534 <_gp+0xffff7ee0>
    2548:	38000126 	beq	r7,zero,2550 <__modsi3+0x54>
    254c:	0085c83a 	sub	r2,zero,r2
    2550:	f800283a 	ret
    2554:	014bc83a 	sub	r5,zero,r5
    2558:	003fec06 	br	250c <_gp+0xffff7eb8>
    255c:	0109c83a 	sub	r4,zero,r4
    2560:	01c00044 	movi	r7,1
    2564:	003fe706 	br	2504 <_gp+0xffff7eb0>
    2568:	00c00044 	movi	r3,1
    256c:	003ff106 	br	2534 <_gp+0xffff7ee0>

00002570 <__udivsi3>:
    2570:	200d883a 	mov	r6,r4
    2574:	2900152e 	bgeu	r5,r4,25cc <__udivsi3+0x5c>
    2578:	28001416 	blt	r5,zero,25cc <__udivsi3+0x5c>
    257c:	00800804 	movi	r2,32
    2580:	00c00044 	movi	r3,1
    2584:	00000206 	br	2590 <__udivsi3+0x20>
    2588:	10000e26 	beq	r2,zero,25c4 <__udivsi3+0x54>
    258c:	28000516 	blt	r5,zero,25a4 <__udivsi3+0x34>
    2590:	294b883a 	add	r5,r5,r5
    2594:	10bfffc4 	addi	r2,r2,-1
    2598:	18c7883a 	add	r3,r3,r3
    259c:	293ffa36 	bltu	r5,r4,2588 <_gp+0xffff7f34>
    25a0:	18000826 	beq	r3,zero,25c4 <__udivsi3+0x54>
    25a4:	0005883a 	mov	r2,zero
    25a8:	31400236 	bltu	r6,r5,25b4 <__udivsi3+0x44>
    25ac:	314dc83a 	sub	r6,r6,r5
    25b0:	10c4b03a 	or	r2,r2,r3
    25b4:	1806d07a 	srli	r3,r3,1
    25b8:	280ad07a 	srli	r5,r5,1
    25bc:	183ffa1e 	bne	r3,zero,25a8 <_gp+0xffff7f54>
    25c0:	f800283a 	ret
    25c4:	0005883a 	mov	r2,zero
    25c8:	f800283a 	ret
    25cc:	00c00044 	movi	r3,1
    25d0:	003ff406 	br	25a4 <_gp+0xffff7f50>

000025d4 <__umodsi3>:
    25d4:	2005883a 	mov	r2,r4
    25d8:	2900122e 	bgeu	r5,r4,2624 <__umodsi3+0x50>
    25dc:	28001116 	blt	r5,zero,2624 <__umodsi3+0x50>
    25e0:	01800804 	movi	r6,32
    25e4:	00c00044 	movi	r3,1
    25e8:	00000206 	br	25f4 <__umodsi3+0x20>
    25ec:	30000c26 	beq	r6,zero,2620 <__umodsi3+0x4c>
    25f0:	28000516 	blt	r5,zero,2608 <__umodsi3+0x34>
    25f4:	294b883a 	add	r5,r5,r5
    25f8:	31bfffc4 	addi	r6,r6,-1
    25fc:	18c7883a 	add	r3,r3,r3
    2600:	293ffa36 	bltu	r5,r4,25ec <_gp+0xffff7f98>
    2604:	18000626 	beq	r3,zero,2620 <__umodsi3+0x4c>
    2608:	1806d07a 	srli	r3,r3,1
    260c:	11400136 	bltu	r2,r5,2614 <__umodsi3+0x40>
    2610:	1145c83a 	sub	r2,r2,r5
    2614:	280ad07a 	srli	r5,r5,1
    2618:	183ffb1e 	bne	r3,zero,2608 <_gp+0xffff7fb4>
    261c:	f800283a 	ret
    2620:	f800283a 	ret
    2624:	00c00044 	movi	r3,1
    2628:	003ff706 	br	2608 <_gp+0xffff7fb4>

0000262c <__mulsi3>:
    262c:	0005883a 	mov	r2,zero
    2630:	20000726 	beq	r4,zero,2650 <__mulsi3+0x24>
    2634:	20c0004c 	andi	r3,r4,1
    2638:	2008d07a 	srli	r4,r4,1
    263c:	18000126 	beq	r3,zero,2644 <__mulsi3+0x18>
    2640:	1145883a 	add	r2,r2,r5
    2644:	294b883a 	add	r5,r5,r5
    2648:	203ffa1e 	bne	r4,zero,2634 <_gp+0xffff7fe0>
    264c:	f800283a 	ret
    2650:	f800283a 	ret
